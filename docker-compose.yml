version: "3.8"

services:
  # ----------------------------------------------------
  # 1. MySQL Database Service
  # ----------------------------------------------------
  db:
    image: mysql:8.0
    container_name: mysql-db-container
    restart: always
    environment:
      # 사용자님께서 설정하신 값으로 업데이트되었습니다.
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: sideproject_db
      MYSQL_USER: spring_user
      MYSQL_PASSWORD: 1234
      # 시간대 설정을 서울(KST)로 지정
      TZ: Asia/Seoul
    ports:
      # 호스트의 3306 포트와 컨테이너의 3306 포트를 연결
      - "3306:3306"
    volumes:
      # DB 데이터를 영구적으로 저장할 볼륨 설정
      - db-data:/var/lib/mysql

  # ----------------------------------------------------
  # 2. Spring Boot Backend Service
  # ----------------------------------------------------
  backend:
    build:
      context: ./sideProject01 # Dockerfile이 있는 경로
      dockerfile: Dockerfile
    container_name: spring-backend-container
    restart: always
    ports:
      # 호스트의 8080 포트와 컨테이너의 8080 포트를 연결
      - "8080:8080"
    depends_on:
      - db # DB 서비스가 시작된 후 백엔드가 시작되도록 보장
    environment:
      # DB 연결 설정 (Host 이름은 'db' 서비스 이름)
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/sideproject_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      # ⭐ 수정됨: 'db' 서비스의 'MYSQL_USER'인 'root'로 변경
      SPRING_DATASOURCE_USERNAME: spring_user
      # ⭐ 수정됨: 'db' 서비스의 'MYSQL_PASSWORD'인 '1234'로 변경
      SPRING_DATASOURCE_PASSWORD: 1234
      # JPA DDL-Auto 설정을 환경 변수로 오버라이드
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Spring Application Name 설정 (선택적)
      SPRING_APPLICATION_NAME: sideproject

  # ----------------------------------------------------
  # 3. React Frontend Service
  # ----------------------------------------------------
  frontend:
    build:
      context: ./sideProject01_React # Dockerfile과 nginx.conf가 있는 경로
      dockerfile: Dockerfile
    container_name: react-frontend-container
    restart: always
    ports:
      # React(Nginx) 컨테이너의 80 포트를 호스트의 3000 포트에 연결
      - "3000:80"
    depends_on:
      - backend # 백엔드가 시작된 후 프론트엔드가 시작되도록 보장

# 영구 데이터 저장을 위한 Docker 볼륨 정의
volumes:
  db-data:
